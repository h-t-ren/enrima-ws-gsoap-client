/* soapenrimaSoap11Proxy.h
   Generated by gSOAP 2.8.3 from enrima.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapenrimaSoap11Proxy_H
#define soapenrimaSoap11Proxy_H
#include "soapH.h"

class SOAP_CMAC enrimaSoap11Proxy : public soap
{ public:
	/// Endpoint URL of service 'enrimaSoap11Proxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	enrimaSoap11Proxy();
	/// Constructor with copy of another engine state
	enrimaSoap11Proxy(const struct soap&);
	/// Constructor with endpoint URL
	enrimaSoap11Proxy(const char *url);
	/// Constructor with engine input+output mode control
	enrimaSoap11Proxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	enrimaSoap11Proxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	enrimaSoap11Proxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~enrimaSoap11Proxy();
	/// Initializer used by constructors
	virtual	void enrimaSoap11Proxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'getModelDescription' (returns error code or SOAP_OK)
	virtual	int getModelDescription(_ns2__getModelDescriptionRequest *ns2__getModelDescriptionRequest, _ns2__getModelDescriptionResponse *ns2__getModelDescriptionResponse) { return getModelDescription(NULL, NULL, ns2__getModelDescriptionRequest, ns2__getModelDescriptionResponse); }
	virtual	int getModelDescription(const char *endpoint, const char *soap_action, _ns2__getModelDescriptionRequest *ns2__getModelDescriptionRequest, _ns2__getModelDescriptionResponse *ns2__getModelDescriptionResponse);

	/// Web service operation 'saveModelDescription' (returns error code or SOAP_OK)
	virtual	int saveModelDescription(_ns2__saveModelDescriptionRequest *ns2__saveModelDescriptionRequest, _ns2__saveModelDescriptionResponse *ns2__saveModelDescriptionResponse) { return saveModelDescription(NULL, NULL, ns2__saveModelDescriptionRequest, ns2__saveModelDescriptionResponse); }
	virtual	int saveModelDescription(const char *endpoint, const char *soap_action, _ns2__saveModelDescriptionRequest *ns2__saveModelDescriptionRequest, _ns2__saveModelDescriptionResponse *ns2__saveModelDescriptionResponse);

	/// Web service operation 'getModelList' (returns error code or SOAP_OK)
	virtual	int getModelList(char *ns2__getModelListRequest, _ns2__getModelListResponse *ns2__getModelListResponse) { return getModelList(NULL, NULL, ns2__getModelListRequest, ns2__getModelListResponse); }
	virtual	int getModelList(const char *endpoint, const char *soap_action, char *ns2__getModelListRequest, _ns2__getModelListResponse *ns2__getModelListResponse);
};
#endif
