/* soapStub.h
   Generated by gSOAP 2.8.3 from enrima.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"http://www.ime.iiasa.ac.at/enrima/model/example"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns2__status
#define SOAP_TYPE_ns2__status (22)
/* ns2:status */
enum ns2__status {ns2__status__EDIT = 0, ns2__status__TEST = 1, ns2__status__COMMIT = 2};
#endif

#ifndef SOAP_TYPE_ns2__setType
#define SOAP_TYPE_ns2__setType (23)
/* ns2:setType */
enum ns2__setType {ns2__setType__COLLECTION = 0, ns2__setType__SEQUENCE = 1};
#endif

#ifndef SOAP_TYPE_ns2__entityRole
#define SOAP_TYPE_ns2__entityRole (24)
/* ns2:entityRole */
enum ns2__entityRole {ns2__entityRole__CONSTANT = 0, ns2__entityRole__PARAMETER = 1, ns2__entityRole__DECISION_USCOREVAR = 2, ns2__entityRole__EXTERNAL_USCOREDECISION_USCOREVAR = 3, ns2__entityRole__OUTCOME_USCOREVAR = 4, ns2__entityRole__AUXILIARY_USCOREVAR = 5, ns2__entityRole__ASSIGNMENT = 6, ns2__entityRole__CONSTRAINT = 7};
#endif

#ifndef SOAP_TYPE_ns2__mathType
#define SOAP_TYPE_ns2__mathType (25)
/* ns2:mathType */
enum ns2__mathType {ns2__mathType__INTEGER = 0, ns2__mathType__BINARY = 1, ns2__mathType__REAL = 2};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns2__model
#define SOAP_TYPE_ns2__model (10)
/* ns2:model */
class SOAP_CMAC ns2__model
{
public:
	int id;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	std::string version;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	std::string note;	/* required element of type xsd:string */
	class ns2__auditable *auditable;	/* required element of type ns2:auditable */
	std::vector<class ns2__modelRev * >revision;	/* required element of type ns2:modelRev */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns2__model */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__model() { ns2__model::soap_default(NULL); }
	virtual ~ns2__model() { }
};
#endif

#ifndef SOAP_TYPE_ns2__modelRev
#define SOAP_TYPE_ns2__modelRev (11)
/* ns2:modelRev */
class SOAP_CMAC ns2__modelRev
{
public:
	int id;	/* required element of type xsd:int */
	int idModel;	/* required element of type xsd:int */
	int revNo;	/* required element of type xsd:int */
	std::string description;	/* required element of type xsd:string */
	std::string note;	/* required element of type xsd:string */
	ns2__auditable *auditable;	/* required element of type ns2:auditable */
	enum ns2__status status;	/* required element of type ns2:status */
	std::vector<class ns2__set * >set;	/* required element of type ns2:set */
	std::vector<class ns2__entity * >entity;	/* required element of type ns2:entity */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns2__modelRev */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__modelRev() { ns2__modelRev::soap_default(NULL); }
	virtual ~ns2__modelRev() { }
};
#endif

#ifndef SOAP_TYPE_ns2__set
#define SOAP_TYPE_ns2__set (12)
/* ns2:set */
class SOAP_CMAC ns2__set
{
public:
	int id;	/* required element of type xsd:int */
	int parentSetId;	/* required element of type xsd:int */
	std::string label;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	std::string note;	/* required element of type xsd:string */
	enum ns2__setType type;	/* required element of type ns2:setType */
	class ns2__iteratorContainer *iteratorContainer;	/* required element of type ns2:iteratorContainer */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns2__set */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__set() { ns2__set::soap_default(NULL); }
	virtual ~ns2__set() { }
};
#endif

#ifndef SOAP_TYPE_ns2__entity
#define SOAP_TYPE_ns2__entity (13)
/* ns2:entity */
class SOAP_CMAC ns2__entity
{
public:
	int id;	/* required element of type xsd:int */
	std::string label;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	std::string note;	/* required element of type xsd:string */
	double constantValue;	/* required element of type xsd:double */
	ns2__iteratorContainer *iteratorContainer;	/* required element of type ns2:iteratorContainer */
	enum ns2__entityRole role;	/* required element of type ns2:entityRole */
	enum ns2__mathType mathType;	/* required element of type ns2:mathType */
	std::string unit;	/* required element of type xsd:string */
	std::string formula;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns2__entity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__entity() { ns2__entity::soap_default(NULL); }
	virtual ~ns2__entity() { }
};
#endif

#ifndef SOAP_TYPE_ns2__iteratorContainer
#define SOAP_TYPE_ns2__iteratorContainer (14)
/* ns2:iteratorContainer */
class SOAP_CMAC ns2__iteratorContainer
{
public:
	std::vector<int >idSet;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns2__iteratorContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__iteratorContainer() { ns2__iteratorContainer::soap_default(NULL); }
	virtual ~ns2__iteratorContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns2__user
#define SOAP_TYPE_ns2__user (15)
/* ns2:user */
class SOAP_CMAC ns2__user
{
public:
	int id;	/* required element of type xsd:int */
	std::string login;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns2__user */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__user() { ns2__user::soap_default(NULL); }
	virtual ~ns2__user() { }
};
#endif

#ifndef SOAP_TYPE_ns2__auditable
#define SOAP_TYPE_ns2__auditable (16)
/* ns2:auditable */
class SOAP_CMAC ns2__auditable
{
public:
	std::string creationDate;	/* required element of type xsd:date */
	ns2__user *createdBy;	/* required element of type ns2:user */
	std::string modificationDate;	/* required element of type xsd:date */
	ns2__user *modifieddBy;	/* required element of type ns2:user */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns2__auditable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__auditable() { ns2__auditable::soap_default(NULL); }
	virtual ~ns2__auditable() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getModelListResponse
#define SOAP_TYPE__ns2__getModelListResponse (17)
/* ns2:getModelListResponse */
class SOAP_CMAC _ns2__getModelListResponse
{
public:
	std::vector<ns2__model * >model;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:model */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE__ns2__getModelListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getModelListResponse() { _ns2__getModelListResponse::soap_default(NULL); }
	virtual ~_ns2__getModelListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getModelDescriptionRequest
#define SOAP_TYPE__ns2__getModelDescriptionRequest (18)
/* ns2:getModelDescriptionRequest */
class SOAP_CMAC _ns2__getModelDescriptionRequest
{
public:
	int idModel;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE__ns2__getModelDescriptionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getModelDescriptionRequest() { _ns2__getModelDescriptionRequest::soap_default(NULL); }
	virtual ~_ns2__getModelDescriptionRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getModelDescriptionResponse
#define SOAP_TYPE__ns2__getModelDescriptionResponse (19)
/* ns2:getModelDescriptionResponse */
class SOAP_CMAC _ns2__getModelDescriptionResponse
{
public:
	ns2__model *model;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:model */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE__ns2__getModelDescriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getModelDescriptionResponse() { _ns2__getModelDescriptionResponse::soap_default(NULL); }
	virtual ~_ns2__getModelDescriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__saveModelDescriptionRequest
#define SOAP_TYPE__ns2__saveModelDescriptionRequest (20)
/* ns2:saveModelDescriptionRequest */
class SOAP_CMAC _ns2__saveModelDescriptionRequest
{
public:
	ns2__model *model;	/* required element of type ns2:model */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE__ns2__saveModelDescriptionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__saveModelDescriptionRequest() { _ns2__saveModelDescriptionRequest::soap_default(NULL); }
	virtual ~_ns2__saveModelDescriptionRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns2__saveModelDescriptionResponse
#define SOAP_TYPE__ns2__saveModelDescriptionResponse (21)
/* ns2:saveModelDescriptionResponse */
class SOAP_CMAC _ns2__saveModelDescriptionResponse
{
public:
	ns2__model *model;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:model */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE__ns2__saveModelDescriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__saveModelDescriptionResponse() { _ns2__saveModelDescriptionResponse::soap_default(NULL); }
	virtual ~_ns2__saveModelDescriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__getModelDescription
#define SOAP_TYPE___ns1__getModelDescription (43)
/* Operation wrapper: */
struct __ns1__getModelDescription
{
public:
	_ns2__getModelDescriptionRequest *ns2__getModelDescriptionRequest;	/* optional element of type ns2:getModelDescriptionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__saveModelDescription
#define SOAP_TYPE___ns1__saveModelDescription (47)
/* Operation wrapper: */
struct __ns1__saveModelDescription
{
public:
	_ns2__saveModelDescriptionRequest *ns2__saveModelDescriptionRequest;	/* optional element of type ns2:saveModelDescriptionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getModelList
#define SOAP_TYPE___ns1__getModelList (50)
/* Operation wrapper: */
struct __ns1__getModelList
{
public:
	char *ns2__getModelListRequest;	/* optional element of type xsd:anyType */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (51)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (52)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (54)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (57)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (58)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__date
#define SOAP_TYPE_xsd__date (9)
typedef std::string xsd__date;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
